// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=Ain, sel=instruction[15], out[0..14]=MuxA);
    Mux(a=true, b=instruction[5], sel=instruction[15], out=LoadA);//if A instruction- load true/ else if C instruction destination bit
    Mux(a=false, b=instruction[4], sel=instruction[15], out=LoadD);//if A instruction- load true/ else if C instruction destination bit
    ARegister(in[0..14]=MuxA, load=LoadA, out=Aout, out[0..14]=addressM);//register A

    And(a=instruction[15], b=instruction[12], out=MuxMc);
    Mux16(a=Aout, b=inM, sel=MuxMc, out=MuxM);
    DRegister(in=Din, load=LoadD, out=Dout);//register D

    And(a=instruction[15], b=instruction[11], out=zxin);
    And(a=instruction[15], b=instruction[10], out=nxin);
    And(a=instruction[15], b=instruction[9], out=zyin);
    And(a=instruction[15], b=instruction[8], out=nyin);
    And(a=instruction[15], b=instruction[7], out=fin);
    And(a=instruction[15], b=instruction[6], out=noin);

    ALU(x=Dout, y=MuxM, zx=zxin, nx=nxin, zy=zyin, ny=nyin, f=fin, no=noin, out=Ain, out=Din, out=outALU, zr=isZero, ng=isNeg);
    Mux16(a=false, b=outALU, sel=instruction[15], out=outM);

    And(a=instruction[15], b=instruction[3], out=writeM);

    Not(in=isNeg, out=JGE);//JGE
    Not(in=isZero, out=JNE);//JNE
    Or(a=isNeg, b=isZero, out=JLE);//JLE
    Not(in=JLE, out=JGT);//JGT

 //   Mux8Way(a=false, b=JGT, c=isZero, d=JGE, e=isNeg, f=JNE, g=JLE, h=true, sel=instruction[0..2], out=JUMP);
    Mux8Way16(a[0]=false, b[0]=JGT, c[0]=isZero, d[0]=JGE, e[0]=isNeg, f[0]=JNE, g[0]=JLE, h[0]=true, sel=instruction[0..2], out[0]=JUMP);

    And(a=instruction[15], b=JUMP, out=LOADin);
    PC(in=Aout, load=LOADin, inc=true, reset=reset, out[0..14]=pc);
}